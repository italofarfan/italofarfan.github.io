{"pages":[{"text":"Hola, gracias por visitar mi blog. Mi nombre es Italo Farfán Vera , MSc. en Inteligencia Artificial por la UPM, BSc. en Ingeniería Electrónica por la UTP y emprendedor junto a Hugo Salas , y Héctor Muñoz con el proyecto Viz Analytics . En este blog encontrarás posts relacionados a la Inteligencia Artificial, al mundo de los datos, Python y de vez en cuando alguna anécdota/experiencia sobre mi aventura como emprendedor tecnológico. Si encuentras útil algún post, te animo a compartirlo y a dejarme un comentario. También puedes escribirme o seguirme a través de: Twitter: italoFFVV . Linkedin . email: hola[at]italofarfan[dot]com . ScoopIt: Data Analytics and Visualizatión en inglés y español . Formación: estudié Ingeniería Electrónica en la UTP , donde recibí formación en matemáticas, estadística, programación, hardware, administración de empresas y hasta historia del arte. Luego hice el Máster en Inteligencia Artificial en la UPM donde conocí Python y descubrí el apasionante mundo de trabajar con datos. Actualmente realizo el Doctorado en Inteligencia Artificial con en el Grupo de Robótica Cognitiva Computacional del Departamento de Inteligencia Artificial (Escuela Superior de Ingenieros Informáticos - UPM ). Proyectos en los que colaboro: Leonardo , Inteligencia Artificial en la nube para resolver problemas complejos. Thani , Asistente virtual que te guía hacia una vida saludable (Inteligencia colectiva y comunidad). Colaboro ocasionalmente con: CIPLI Research Center , les recomiendo seguir su proyecto FractalUp , FractalUp is Visual Learning that sums up the best content through the best teaching techniques of the internet. Improving competitiveness in high-school & university students and employees that need to empower their knowledge in Science. Innovivir , consultora en innovación especializada en hacer que las organizaciones vivan innovando de forma integral y continua. Soy miembro de: Python España , una asociación sin ánimo de lucro cuyo propósito es promover el uso del lenguaje de programación Python en España. Hacerte socio cuesta 30 € y ganas muchas ventajas, como descuentos del 40% en libros físicos y del 50% en libros electrónicos de @OReillyMedia IEEE España , IEEE's core purpose is to foster technological innovation and excellence for the benefit of humanity.","tags":"","loc":"http://localhost:8000/pages/sobre-mi.html","title":"Sobre mí"},{"text":"Aquí dejaré links de recursos que actualmente estoy usando, como por ejemplo: cursos , libros y materiales . Espero que alguno de ellos te sea útil. Si no encuentras algún enlace, mirá el apartado final: Materiales que ya leí . Actualizado: 03-14-2015 Datos Introducción al Business Intelligence Canal de UOC (Vídeos de BI e IA) Intro to Data Science del programa Nanodegree de Udacity Tutoriales Getting Started With Python For Data Science Let's Make a Map - D3 Shortcuts (atajos de teclado) y guías Haroopress - Markdown reStructuredText Sublime Text Pelican Blogs y webs que sigo Pybonacci - Python y Ciencia BVVA Centro de Innovación ActuaUPM Cacheme - Computer-aided Chemical Engineering Entrepreneurship IE Business School Big Data 4 Success Data Analytics and Visualization- Noticias y posts . Contenido que filtro y curo en inglés y español. Materiales que ya leí: Aún no he terminado de leer, vuelve pronto ;) Datos Tutoriales Shortcuts y guías Blogs y webs que sigo Libros","tags":"tutoriales","loc":"http://localhost:8000/pages/links.html","title":"Links"},{"text":"Introducción Si estás utilizando Scikit-learn, Pandas u otro paquete de Python para ingeniería o ciencia sabrás que es una pérdida de tiempo estar buscando y descargando los paquetes que deseas instalar. Además de tener en cuenta la compatibilidad entre paquetes. Para evitar problemas usamos herramientas como VirtualEnv (para crear entornos virtuales y trabajar con distintas versiones de librerías) y PIP (para instalar paquetes). La buena noticia es que existe Anaconda, que nos permite instalar paquetes y gestionar entornos virtuales fácilmente, además de tener otras ventajas: Ahorro de tiempo al instalar paquetes adicionales requeridos. Tiene un administrador de paquetes y gestor de entornos virtuales. No necesitas permisos de administrador. Multiplataforma (Windows, Mac y Linux). Es completamente gratuita, incluso para uso comercial y redistribución. Ahora pasemos a definir Anaconda, ver la instalación, creación de entornos virtuales y conocer otros comandos básicos. ¿Qué es Anaconda? Anaconda es una distribución de Python multiplataforma, desarrollada por Continuum Analytics . Contiene una gran colección de paquetes y librerías para análisis de datos, computación científica e ingeniería. Si no deseas descargar la distribución completa (por tener un ancho de banda reducido, ...) puedes optar por Miniconda , que contiene solamente el gestor de paquetes Conda y Python para luego instalar lo que necesites. Instalando Miniconda Descarga la versión que desees: Conda: http://continuum.io/downloads Miniconda: http://conda.pydata.org/miniconda.html Yo he descargado Miniconda3-latest-Linux-x86_64.sh , Miniconda Python 3.4 64-bit(bash installer) y guardado en la carpeta Donwloads . Se recomienda usar Python 3, que es el presente y futuro de Python . Abrimos un terminal (Ctrl + Alt + t), vamos a la carpeta donde hemos guardado el instalador (en mi caso Downloads ) y procedemos con la instalación. cd Downloads bash Miniconda3-latest-Linux-x86_64.sh Nos aparecerá un mensaje de bienvenida, presionamos enter y nos saldrá la licencia. Para dejar de leerla presiona Crtl + c y para aceptar las condiciones escribimos \"yes\". Nos quedarán dos preguntas más por responder, en mi caso he presionado \"enter\" y escrito \"yes\". Finalmente para activar los cambios abre un nuevo terminal. Abajo puedes ver como he respondido: Miniconda3 will now be installed into this location: /home/italo/miniconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [ /home/italo/miniconda3 ] >>> PREFIX = /home/italo/miniconda3 installing: python-3.4.2-0 ... installing: conda-env-2.1.3-py34_0 ... installing: openssl-1.0.1k-0 ... installing: pycosat-0.6.1-py34_0 ... installing: pyyaml-3.11-py34_0 ... installing: readline-6.2-2 ... installing: requests-2.5.3-py34_0 ... installing: sqlite-3.8.4.1-0 ... installing: system-5.8-1 ... installing: tk-8.5.15-0 ... installing: xz-5.0.5-0 ... installing: yaml-0.1.4-0 ... installing: zlib-1.2.8-0 ... installing: conda-3.9.1-py34_0 ... Python 3.4.2 :: Continuum Analytics, Inc. creating default environment... installation finished. Do you wish the installer to prepend the Miniconda3 install location to PATH in your /home/italo/.bashrc ? [ yes|no ] [ no ] >>> yes Prepending PATH = /home/italo/miniconda3/bin to PATH in /home/italo/.bashrc A backup will be made to: /home/italo/.bashrc-miniconda3.bak For this change to become active, you have to open a new terminal. Thank you for installing Miniconda3! Actualizando Conda Primero, abrimos un nuevo terminal y verificamos si la instalación ha sido correcta. $ conda -V conda 3.9.1 Otra forma: $ conda info Actualizando Conda: $ conda update conda Entornos virtuales Ver los entornos que tenemos: $ conda info -e Nos mostrará los entornos creados. Yo tengo dos: django y root. El símbolo * indica en que entorno estamos. Cuando instalas Anaconda el entorno por defecto (default) será root. # conda environments: # django /home/italo/miniconda3/envs/django root * /home/italo/miniconda3 Crear un entorno. Por ejemplo llamado django y utilizando Python 3: $ conda create -n django python Crear un entorno usando python 2. La versión de un paquete se indica con el signo \"=\". $ conda create -n django python = 2 Activar un entorno. Por ejemplo el entorno \"django\": $ source activate django Observa que ahora el nombre del entorno aparecerá entre paréntesis. ( django ) italo@italo-tosh:~ $ Desactivar entorno django: ( django ) italo@italo-tosh:~ $ source deactivate Eliminar un entorno: $ conda remove -n nombredelentorno --all Clonar un entorno: conda create -n nombredelnuevo --clone nombredelquequieresclonar Instalar paquetes Primero veamos los entornos que tenemos. Tenemos dos, el root (raíz) y django, que lo acabamos de crear. italo@italo-tosh:~ $ conda info -e # conda environments: # django /home/italo/miniconda3/envs/django root * /home/italo/miniconda3 Instalando paquetes en el entorno root. Por ejemplo el paquete Scipy: conda install scipy Instalando paquetes en otro entorno: $ conda install -n mombredelentorno nombredelpaquete Instalando una versión específica. Por ejemplo: en el entorno de nombre myenv instalamos el paquete Scipy, versión 0.12.0 $ conda install -n myenv scipy = 0.12.0 Otra forma de instalar paquetes es activando el entorno y luego proceder con la instalación: $ source activate nombredelentorno $ conda install nombredelpaquete Listar los paquetes instalados. Si estamos en el entorno root (entorno \"myenv\" desactivado): $ conda list -n myenv Si estamos en el entorno \"myenv\" (el entorno \"myenv\" está activado). $ conda list Ver si un paquete ya está instalado: $ conda list -n myenv scipy Comprobar si un paquete esta disponible para instalar: $ conda search nombredelpaquete O también: conda search \"&#94;django$\" Usar PIP para instalar otros paquetes Anaconda incluye más de 190 paquetes pero puede pasar que el que desees no esté incluido en Anaconda. Entonces puedes hacer uso de PIP. Primero instala el paquete PIP (probablemente ya esté instalado), activa el entorno y luego usa los comandos de PIP. $ conda install -n nombredelentorno pip $ source activate nombredelentorno $ pip install nombredelpaquete Con PIP puedes instalar librerías, crear un archivo de requerimientos, etc. Más información Reference Guide PIP (2015) Entornos virtuales con PIP (2013) Conda FAQ(2015) Using the Anaconda Python Distribution(2014) Virtualenv Python Guide(2014)","tags":"Tutoriales","loc":"http://localhost:8000/posts/2015/04/06/paquetes-python-con-anaconda.html","title":"Paquetes Python para ciencia e ingeniería con Anaconda"},{"text":"La Inteligencia Artificial es un campo perteneciente a las Ciencias de la Computación cuyo objetivo es la creación de software y/o hardware inteligente. Entendamos que cualquier sistema basado en hardware y software que pueda realizar exitosamente una tarea no trivial se dice que posee un grado de inteligencia artificial [1] . Una actividad no trivial podría ser: la toma de decisiones financieras, pilotar un helicóptero, desarrollar nuevos productos, realizar un plan de mantenimiento predictivo de máquinas, etc. Algunas áreas de la Inteligencia Artificial son: teoría de juegos, procesamiento de lenguaje natural, visión por computador, sistemas expertos, búsqueda, reconocimiento de patrones y más. Cuando en Inteligencia Artificial hablamos de algoritmos genéticos, hablamos de algoritmos de búsqueda inspirados en la teoría de evolución. Un algoritmo es un proceso o conjunto de reglas que permite resolver de manera eficaz un problema. Mejores algoritmos serán eficientes, peores algoritmos sólo serán eficaces. La Inteligencia Artificial va de la mano del desarrollo tecnológico. Si bien es cierto, la Inteligencia Artificial emergió con fuerza en los 40s con la aparición de las primeras computadoras electrónicas. A medida que la tecnología nos ha ido proporcionando mayor capacidad de procesamiento y almacenamiento, la Inteligencia Artificial ha ido cobrando mayor protagonismo en la solución de problemas complejos. En la actualidad hablamos de sistemas inteligentes capaces de realizar transacciones de compra y venta de acciones en tiempo real, asistentes virtuales de atención al consumidor, aplicaciones orientadas a la fidelización de clientes, etc. Incluso es muy probable que se haya aplicado la teoría de juegos en las negociaciones entre la Unión Europea y Grecia. La teoría de juegos busca predecir cuál será el resultado más probable en una negociación, ya sea entre personas, empresas o países, donde pueden estar en juego millones de euros. Debemos recordar que todo esto es posible gracias a que somos capaces de convertir en conocimiento la información que extraemos de los datos o del Big Data. Three main subcategories: machine learning, curated knowledge and reverse engineering the brain. Source: https://www.inovancetech.com/buzzwords.html Cuando hablamos de Big Data nos referimos a una gran cantidad de datos que sobrepasan las capacidades de procesamiento de las herramientas tradicionales. Podríamos hablar de muchos datos cuando sobrepasan los terabytes pero esto es relativo (recordemos que lo que es Big Data hoy no lo era hace cinco años). Para saber si nos enfrentamos a una problema de big data tenemos que tener en cuenta el volumen (el tamaño de los datos), la velocidad (de llegada y procesamiento) y la variedad (datos de registros web, audio, social media, sensores, etc) [2] . En una organización los datos pueden venir de fuentes internas (por ejemplo: información de diferentes departamentos que incluyen costes, historial de clientes, stock, etc ) y de fuentes externas de información (por ejemplo: lo que dicen mis clientes en una red social). Esto para el sector retail y finanzas puede ser muy útil de cara al desarrollo de nuevos productos e identificación de tendencias. El sector minero también tiene la necesidad de analizar grandes volúmenes de datos, provenientes de tareas como la prospección, almacenado de información geológica y producción [3] . Tratar los datos como un activo les permite: reducir los costes de mantenimiento y los tiempos no productivos de las máquinas, lo cual repercute positivamente en sus beneficios (hablamos de millones de dólares). Para realizar el procesamiento de grandes datos podemos hacer uso de procesamiento paralelo, donde muchas máquinas trabajan simultáneamente para resolver un problema, o de computación distribuida, donde distintos dispositivos independientes y conectados en red colaboran para alcanzar una solución. MapReduce es una tecnología que da soporte a la computación paralela y Hadoop es otra tecnología disruptiva que da soporte a la computación distribuida. Además también es posible hacer uso de inteligencia artificial desde la nube. La computación en la nube (cloud computing), el Big Data y la Inteligencia Artificial, juntas, nos permiten construir una ventana para mirar hacia atrás y adelante. Analizar los datos para simular que pasará o ver los posibles resultados al tomar una decisión es como mirar hacia el futuro, es lo que permite generar ventajas competitivas aunque también implica que las empresas se comprometan y adopten una cultura basada en los datos. Ahora veamos en un vídeo un ejemplo producido por MIT Senseable City Lab con el BBVA [4] .. Traducción de la descripción del vídeo: Una visualización de las transacciones bancarias en tiempo real que nos muestran los patrones de compra durante la Pascua de 2011 en España, y donde 1,4 millones de personas y 374.220 empresas gastaron € 232 millones. Observen que en las gráficas de la izquierda del vídeo aparecen patrones que se repiten como los picos en la compra de alimentos (línea azul) durante los días de vacaciones de Pascua. ¿Para la Pascua de 2012 se replicarán estos patrones de gasto? Si es así, podemos usar esta previsibilidad para mejorar los servicios urbanos y servir mejor a los habitantes de la ciudad? Referencias [1] Frampton, M. (2014). Big Data Made Easy: A Working Guide to the Complete Hadoop Toolset. Apress. Link de [1]: [2] Neapolitan, R. E., & Jiang, X. (2012). Contemporary artificial intelligence. CRC Press. Link de [2]: [3] Matías Gil (2012). La industria minera en búsqueda de la eficiencia con Big Data. América Economía. Link de [3]: [4] MIT Senseable City Lab with BBVA (2012). SPRING SPREE — spending patterns in spain during easter 2011. Link de [4]:","tags":"artículos","loc":"http://localhost:8000/posts/2015/03/03/inteligencia-artificial-y-big-data.html","title":"Inteligencia Artificial y Big Data"},{"text":"Hace un par de meses decidí mudar mi blog de Wordpress a Github (usando Pelican) por la flexibilidad y facilidad para insertar notebooks de ipython, líneas de código e incluso ejemplos con D3 para hacer visualización de datos. Para escribir los posts puedes usar Markdown o reStructuredText, es igual de fácil que escribir entradas con el editor de Wordpress o Blogger. 1. Ingredientes Pelican: un generador de sitios estáticos construido con Python. Hay muchos más, me quede con Pelican por la comunidad activa (lo que significa: más documentación, plugins, plantillas). GitHub Pages: que permite alojar webs personales y de tus proyectos desde tu repositorio GitHub. Dominio propio: no es obligatorio. Si no lo tienes la url de tu blog será tu-usuario.github.io . 2. Configuración de GitHub Pages Entra a GitHub y crea un nuevo repositorio usando tu nombre de usuario, quedará de la forma: tu-usuario.github.io . En este nuevo repositorio se alojará el contenido de tu blog. También podrías haber seguido las instrucciones de Github Pages para crear tu nuevo repositorio, pero sólo hasta el paso 1 (crear nuevo repositorio), ya que ellos te animarán a usar otro generador de sitios web, llamado Jekyll (que creo esta construido en Ruby). La dirección de tu nuevo repositorio será: https://github.com/usuario/usuario.github.io . Mi repositorio con mi usuario italofarfan quedo así: 3. Instalación y configuración de Pelican Hay que instalar Pelican y Markdown. Markdown es un lenguaje sencillo para generar contenido HTML sin necesidad de saber HTML. Pelican ya viene con reStructuredText (reST) que también sirve para generar contenido HTML y es parte del proyecto Doctilus dentro de la comunidad de Python, sin embargo para Markdown existe un procesador amigable que te muestra los cambios mientras escribes y podría facilitarte las cosas. Yo por el momento uso los dos. Empecemos con la instalación. Abrimos un terminal (Crtl+ Alt + T) e instalamos PIP (un herramienta para instalar paquetes escritos en Python). Si ya lo tienes instalado salta al paso siguiente: $ sudo apt-get install python-pip Instalamos Pelican y Markdown: $ pip install pelican markdown Crea una carpeta llamada, por ejemplo, blog . Esta contendrá todo lo necesario para crear tu blog/web, dentro de ella ejecutaremos pelican quickstart . Pelican por medio de un diálogo te ayudará con la configuración. $ mkdir blog $ cd blog $ pelican-quickstart Abajo puedes ver como respondi: Where do you want to create your new web site? [ . ] What will be the title of this web site? > Italo Farfán Who will be the author of this web site? > Italo Farfán Vera What will be the default language of this web site? [ es ] Do you want to specify a URL prefix? e.g., http://example.com ( Y/n ) > y What is your URL prefix? ( see above example; no trailing slash ) > http://italofarfan.github.io Do you want to enable article pagination? ( Y/n ) > y How many articles per page do you want? [ 10 ] Do you want to generate a Fabfile/Makefile to automate generation and publishing? ( Y/n ) > y Do you want an auto-reload & simpleHTTP script to assist with theme and site development? ( Y/n ) > y Do you want to upload your website using FTP? ( y/N ) > n Do you want to upload your website using SSH? ( y/N ) > n Do you want to upload your website using Dropbox? ( y/N ) > n Do you want to upload your website using S3? ( y/N ) > n Do you want to upload your website using Rackspace Cloud Files? ( y/N ) > n > Pelican creará la siguiente estructura de directorios: $ tree ├── Makefile ├── content ├── develop_server.sh ├── fabfile.py ├── output ├── pelicanconf.py └── publishconf.py Pelican asume que los artículos que escribirás los guardarás en la carpeta content . Adicionalmente deberías crear dos nuevas carpetas. $ mkdir content/pages $ mkdir content/images En pages podrás crear los archivos about me , contact , etc. Pelican los reconocerá sin problemas. Pelican convertirá tus artículos guardados en content en html y los guardará en la carpeta output . Más adelante comentaré cómo hacer para que tengan el siguiente estilo: midominio.com/2015/01/31/nombre-de-mi posts.html Es en output donde se generará tu sitio web y es donde tendrás que colocar el archivo CNAME si deseas utilizar un dominio propio (tudominio.com). Más adelante hablaremos de ello. Configurando nuestro repositorio GitHub Tenemos que inicializar un repositorio github desde nuestra carpeta output y conectarlo con nuestro repositorio remoto creado anteriormente (usuario.github.io). $ cd output $ git init $ git remote add origin https://github.com/username/username.github.io.git $ git add --all $ git commit -m \"commit message\" $ git push origin master Ya estás listo para publicar pero *no todas las plantillas ofrecen soporte a todos los plugins *. Por ejemplo Disqus, que permite integrar comentarios en tu blog, no funciona con la plantilla por defecto. La plantilla que usa Amy y la mía funcionan. Amy Hanlon tiene una guía en inglés muy completa . Plugins y plantillas Yo estoy utilizando la plantilla pelican-bootstrap3 y el plugin Tipue Search para agregar el cuadro de búsqueda en la parte superior derecha. La plantilla es responsive. Para usarlas lo más rápido es clonar el repositorio plugins. $ git clone https://github.com/getpelican/pelican-themes Y el repositorio plantillas al directorio que creaste, en mi caso el directorio \"blog\". $ git clone https://github.com/getpelican/pelican-plugins Luego tienes que abrir el archivo pelicanconf.py e indicar la ruta donde se encuentran los plugins y el plugin que usarás. Agregar lo siguiente: # Plugins PLUGIN_PATH = 'pelican-plugins' PLUGINS = [ 'tipue_search' ] Indica la plantilla que usarás, en mi caso al usar la plantilla pelican-bootstrap3 la variable THEME queda de la siguiente forma: pelican-themes/nombre-de-plantilla. THEME = \"pelican-themes/pelican-bootstrap3\" Si aún te quedan dudas echa un vistazo al archivo pelicancof.py y publishconf.py de DandyDev creador de plantilla Booostrap3 Más información: Documentación de la plantilla Bootstrap3 Migrating to GitHub Pages using Pelican por Amy Hanlon Agregando Disqus, Google Analytics y Addthis (botones para compartir) Se supone que ya tienes una cuenta en estos servicios gratuitos. Disqus: necesitas de un short_name , para ello registra tu web: https://disqus.com/admin/create/ Indica el nombre de tu sitio (SITE NAME) y una DISQUS_URL. Este último será tu shortname. Finalmente obtendrás algo como esto: http://short_name.disqus.com/admin/settings AddThis: necesitas Profile ID, lo puedes crear desde settings: https://www.addthis.com/settings/publisher Google Analytics: necesitas de un \"identificador\", si no lo tienes, entra a Google Analytics y crea una nueva propiedad. Desde Admin/Property obtendrás un identificador de la forma: UA-XXXX-YYYY Ahora agrega las siguientes líneas en pelicanconf.py y publishconf.py DISQUS_SITENAME = \"tu_short_name\" GOOGLE_ANALYTICS = \"UA-XXXXXX-1\" ADDTHIS_PROFILE = 'ra-XXXXXXXXXXXXXXXX' Más información en: Howto Setup Comments with Disqus in Pelican 4. Configurando dominio propio Crea un archivo CNAME y dentro escribe tu dominio, por ejemplo: tudominio.com Guarda el archivo CNAME en la carpeta output Entra al panel de control de tu proveedor de dominio y crea un registro CNAME que apunte a tu_usuario.github.io o un registro A añadiendo las IP 192.30.252.153 y 192.30.252.154 . En mi caso Strato solo me déjo agregar un IP e igual funciona. Más info: Ayuda de Github para crear un registro CNAME Ayuda de Github para crear un registro A 5. Escribiendo posts con reST y Md. Creamos un archivo con la extensión .rst o .md y lo guardamos en la carpeta content . Ejemplo en reStructuredTex Mi primer post ############## : date : 2015 - 03 - 01 15 : 43 : tags : test , prueba : category : python : slug : mi - primer - post : author : TuNombre : summary : Versi ó n corta para el í ndice y feeds Escribe aqu í el contenido de tu primer post Ejemplo en Markdown Title : My super title Date : 2010 - 12 - 03 10 : 20 Tags : thats , awesome Category : yeah Slug : my - super - post Author : Alexis Metaireau Summary : Short version for index and feeds This is the content of my super blog post . Para escribir post con Markdown estoy usando Haroopress que desde el Menu/Insert tienes todos los comandos necesarios. Y para reStructuredText estoy usando SublimeText. Automatizando la creación de archivos Para poder crear más rápido los posts podemos hacer uso de un script que deberás guardar en el directorio principal ( blog ): reStructuredText: make_entry.py , de Nafiul Islam . Descárgalo aquí . Markdown: make_entrymd.py , modifiqué el archivo para que funcione con md. Descárgalo aquí . Para ejecutarlo nos ubicamos en el directorio principal, reemplaza \"nueva entrada\" por el nombre que desees: $ python make_entrymd.py \"Nueva Entrada\" El resultado será: File created -> content/2015_02_31_nueva-entrada.md Se creará un archivo similar al siguiente: Title : Nueva Entrada Date : 2015 - 15 - 03 12 : 20 Tags : Category : Slug : nueva - entrada Author : Summary : status : draft El status draft te permite crear artículos en estado borrador. Muy útil si aún no deseas publicar o quieres que otra persona ĺo revise. Pelican no mostrará tu artículo hasta que borres la línea status: draft o la cambies por status: published . Hasta entonces lo guardará en la carpeta drafts . Posts con la forma: /año/mes/dia/nombre-post.html Si deseas que tus posts tengan la forma mi_usuario.github.io/2015/03/10/primera-entrada.html tendremos que agregar en el archivo pelicanconf.py lo siguiente: # Formating URLs ARTICLE_URL = '{date:%Y}/{date:%m}/{date: %d }/{slug}.html' ARTICLE_SAVE_AS = '{date:%Y}/{date:%m}/{date: %d }/{slug}.html' 5. Generando tu blog Ahora ya tienes tienes escrito tu primer artículo toca generar tu web desde el directorio principal (blog): $ cd blog $ make devserver Puedes ver los cambios en tu blog entrando en: http://localhost:8000 Y para salir escribe: $ make stopserver Empuja los cambios a tu repositorio Ahora toca alojar tu blog en tu repositorio remoto GitHub. Recuerda hacerlo desde la carpeta output. $ cd output $ git add --all $ git commit -m \"commit message\" $ git push origin master Y eso es todo, ya sabes todo lo necesario para mantener tu blog ;) . 6. Comandos extras en caso de accidentes Inicializar repositorio $ cd output $ git init $ git remote add origin https://github.com/username/username.github.io.git Restaurar repositorio $ cd blog $ git clone https://github.com/username/username.github.io.git output $ pelican content $ cd output $ git add --all $ git commit -m \"commit message\" $ git push origin master 7. Referencias Archivo pelicancof.py y publishconf.py del blog de DandyDev, creador de plantilla Booostrap3 . Cheat Sheet para Markdown . Amy Hanlon, Migrating to Github Pages using Pelican . Documentación de Pelican - Getting Started Pelican Boostrap3 Theme .","tags":"tutoriales","loc":"http://localhost:8000/posts/2015/03/01/mi-blog-con-pelican-y-github.html","title":"Mi blog con Pelican y Github"}]}