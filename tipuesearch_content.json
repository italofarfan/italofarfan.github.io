{"pages":[{"text":"Mi nombre es Italo Farfán Vera. Tengo un MSc en Inteligencia Artificial por la Universidad Politécnica de Madrid y un BSc en Ing. Electrónica por la Universidad Tecnológica del Perú. Actualmente me encuentro emprendiendo en el campo de análisis y visualización ( Viz Analytics ) y haciendo un doctorando con el Grupo de Robótica Cógnitiva Computacional del Departamento de Inteligencia Artificial (Escuela Superior de Ingenieros Informáticos - UPM). Mi investigación esta relacionada al Machine Learning y UAVs (Vehículos Aéreos no Tripulados).","tags":"","loc":"http://italofarfan.com/pages/about-me.html","title":"About me"},{"text":"La Inteligencia Artificial es un campo perteneciente a las Ciencias de la Computación cuyo objetivo es la creación de software y/o hardware inteligente. Entendamos que cualquier sistema basado en hardware y software que pueda realizar exitosamente una tarea no trivial se dice que posee un grado de inteligencia artificial [1] . Una actividad no trivial podría ser: la toma de decisiones financieras, pilotar un helicóptero, desarrollar nuevos productos, realizar un plan de mantenimiento predictivo de máquinas, etc. Algunas áreas de la Inteligencia Artificial son: teoría de juegos, procesamiento de lenguaje natural, visión por computador, sistemas expertos, búsqueda, reconocimiento de patrones y más. Cuando en Inteligencia Artificial hablamos de algoritmos genéticos, hablamos de algoritmos de búsqueda inspirados en la teoría de evolución. Un algoritmo es un proceso o conjunto de reglas que permite resolver de manera eficaz un problema. Mejores algoritmos serán eficientes, peores algoritmos sólo serán eficaces. La Inteligencia Artificial va de la mano del desarrollo tecnológico. Si bien es cierto, la Inteligencia Artificial emergió con fuerza en los 40s con la aparición de las primeras computadoras electrónicas. A medida que la tecnología nos ha ido proporcionando mayor capacidad de procesamiento y almacenamiento, la Inteligencia Artificial ha ido cobrando mayor protagonismo en la solución de problemas complejos. En la actualidad hablamos de sistemas inteligentes capaces de realizar transacciones de compra y venta de acciones en tiempo real, asistentes virtuales de atención al consumidor, aplicaciones orientadas a la fidelización de clientes, etc. Incluso es muy probable que se haya aplicado la teoría de juegos en las negociaciones entre la Unión Europea y Grecia. La teoría de juegos busca predecir cuál será el resultado más probable en una negociación, ya sea entre personas, empresas o países, donde pueden estar en juego millones de euros. Debemos recordar que todo esto es posible gracias a que somos capaces de convertir en conocimiento la información que extraemos de los datos o del Big Data. Cuando hablamos de Big Data nos referimos a una gran cantidad de datos que sobrepasan las capacidades de procesamiento de las herramientas tradicionales. Podríamos hablar de muchos datos cuando sobrepasan los terabytes pero esto es relativo (recordemos que lo que es Big Data hoy no lo era hace cinco años). Para saber si nos enfrentamos a una problema de big data tenemos que tener en cuenta el volumen (el tamaño de los datos), la velocidad (de llegada y procesamiento) y la variedad (datos de registros web, audio, social media, sensores, etc) [2] . En una organización los datos pueden venir de fuentes internas (por ejemplo: información de diferentes departamentos que incluyen costes, historial de clientes, stock, etc ) y de fuentes externas de información (por ejemplo: lo que dicen mis clientes en una red social). Esto para el sector retail y finanzas puede ser muy útil de cara al desarrollo de nuevos productos e identificación de tendencias. El sector minero también tiene la necesidad de analizar grandes volúmenes de datos, provenientes de tareas como la prospección, almacenado de información geológica y producción [3] . Tratar los datos como un activo les permite: reducir los costes de mantenimiento y los tiempos no productivos de las máquinas, lo cual repercute positivamente en sus beneficios (hablamos de millones de dólares). Para realizar el procesamiento de grandes datos podemos hacer uso de procesamiento paralelo, donde muchas máquinas trabajan simultáneamente para resolver un problema, o de computación distribuida, donde distintos dispositivos independientes y conectados en red colaboran para alcanzar una solución. MapReduce es una tecnología que da soporte a la computación paralela y Hadoop es otra tecnología disruptiva que da soporte a la computación distribuida. Además también es posible hacer uso de inteligencia artificial desde la nube. La computación en la nube, el Big Data y la Inteligencia Artificial, juntas, nos permiten construir una ventana para mirar hacia atrás y adelante. Analizar los datos para simular que pasará o ver los posibles resultados al tomar una decisión es como mirar hacia el futuro, es lo que permite generar ventajas competitivas aunque también implica que las empresas se comprometan y adopten una cultura basada en los datos. Referencias [1] Frampton, M. (2014). Big Data Made Easy: A Working Guide to the Complete Hadoop Toolset. Apress. Link de [1]: [2] Neapolitan, R. E., & Jiang, X. (2012). Contemporary artificial intelligence. CRC Press. Link de [2]: [3] Matías Gil (2012). La industria minera en búsqueda de la eficiencia con Big Data. América Economía. Link de [3]:","tags":"artículos","loc":"http://italofarfan.com/posts/2015/03/03/inteligencia-artificial-y-big-data.html","title":"Inteligencia Artificial y Big Data"},{"text":"Cansado de lidiar con el editor de wordpress (y antes con el de blogger) decidí buscar herramientas que me ofrecieran construir un blog más limpio, integrar código y los notebooks de python más fácilmente y sobre todo alojamiento gratuito. A continuación dejaré unos tips que me ayudaron a configurar mi blog con dominio propio y te servirán si no eres informático. Ingredientes: Pelican: un generador de sitios estáticos construido con Python. Hay muchos más, me quede con Pelican por la comunidad activa (lo que significa: más documentación, plugins, plantillas). GitHub Pages: que permite alojar webs para ti y tus proyectos alojadas en tu repositorio Github. Dominio propio: no es obligatorio. Si no lo tienes la url de tu blog será usuario.github.io Configuración de GitHub Pages Crea un repositorio en github con el nombre: usuario.github.io Si sigues las instrucciones de Github Pages solo crea el repositorio (primer paso), nada más. Allí es donde se alojará el contenido de tu blog/web. Instalación y configuración de Pelican Tienes que instalar Pelican y Markdown, este último es opcional. Markdown es un lenguaje sencillo para generar contenido HTML sin necesidad de saber HTML. Pelican usa reStructuredText (rST) que también es fácil de manejar. Más info sobre paquetes . $ pip install pelican markdown Crea una carpeta por ejemplo, blog . Esta contendrá todo lo necesario para crear tu blog/web, dentro de ella ejecutaremos pelican quickstart . Pelican por medio de un diálogo te ayuda con la configuración. $ mkdir blog $ cd blog $ pelican-quickstart Abajo puedes ver como respondi: Where do you want to create your new web site? [ . ] What will be the title of this web site? > Italo Farfán Who will be the author of this web site? > Italo Farfán Vera What will be the default language of this web site? [ es ] Do you want to specify a URL prefix? e.g., http://example.com ( Y/n ) > y What is your URL prefix? ( see above example; no trailing slash ) > http://italofarfan.github.io Do you want to enable article pagination? ( Y/n ) > y How many articles per page do you want? [ 10 ] Do you want to generate a Fabfile/Makefile to automate generation and publishing? ( Y/n ) > y Do you want an auto-reload & simpleHTTP script to assist with theme and site development? ( Y/n ) > y Do you want to upload your website using FTP? ( y/N ) > n Do you want to upload your website using SSH? ( y/N ) > n Do you want to upload your website using Dropbox? ( y/N ) > n Do you want to upload your website using S3? ( y/N ) > n Do you want to upload your website using Rackspace Cloud Files? ( y/N ) > n > Pelican creará la siguiente estructura de directorios: $ tree ├── Makefile ├── content ├── develop_server.sh ├── fabfile.py ├── output ├── pelicanconf.py └── publishconf.py Pelican asume que los artículos que escribirás los guardarás en la carpeta content . Adicionalmente deberías crear dos nuevas carpetas. $ mkdir content/pages $ mkdir content/images En pages podrás crear los archivos about me , contact , etc. Pelican los reconocerá sin problemas. Pelican convertirá tus artículos guardados en content en html y los guardará en la carpeta output . Más adelante comentaré cómo hacer para que tengan el siguiente estilo: midominio.com/2015/01/31/nombre-de-mi posts.html Es en output donde se generará tu sitio web y es donde tendrás que colocar el archivo CNAME si deseas utilizar un dominio propio (tudominio.com). Subiendo nuestros cambios a la nube Tenemos que inicializar un repositorio github desde nuestra carpeta output y conectarlo con nuestro repositorio remoto creado anteriormente (usuario.github.io). $ cd output $ git init $ git remote add origin https://github.com/username/username.github.io.git $ git add --all $ git commit -m \"commit message\" $ git push origin master Ya estás listo para publicar pero *no todas las plantillas ofrecen soporte a todos los plugins *. Por ejemplo Disqus, que permite integrar comentarios en tu blog, no funciona con la plantilla por defecto. La plantilla que usa Amy y la mía funcionan. Amy Hanlon tiene una guía en inglés muy completa . Plugins y plantillas Yo estoy utilizando la plantilla pelican-bootstrap3 y el plugin Tipue Search para agregar el cuadro de búsqueda en la parte superior derecha. La plantilla es responsive. Para usarlas lo más rápido es clonar el repositorio plugins. $ git clone https://github.com/getpelican/pelican-themes Y el repositorio plantillas al directorio que creaste, en mi caso el directorio \"blog\". $ git clone https://github.com/getpelican/pelican-plugins Luego tienes que abrir el archivo pelicanconf.py e indicar la ruta donde se encuentran los plugins y el plugin que usarás. Agregar lo siguiente: # Plugins PLUGIN_PATH = 'pelican-plugins' PLUGINS = [ 'tipue_search' ] Indica la plantilla que usarás, en mi caso al usar la plantilla pelican-bootstrap3 la variable THEME queda de la siguiente forma: pelican-themes/nombre-de-plantilla. THEME = \"pelican-themes/pelican-bootstrap3\" Si aún te quedan dudas echa un vistazo al archivo pelicancof.py y publishconf.py de DandyDev creador de plantilla Booostrap3 Más información: Documentación de la plantilla Bootstrap3 Migrating to GitHub Pages using Pelican por Amy Hanlon Agregando Disqus, Google Analytics y Addthis (botones para compartir) Se supone que ya tienes una cuenta en estos servicios gratuitos. Disqus: necesitas de un short_name , para ello registra tu web: https://disqus.com/admin/create/ Indica el nombre de tu sitio (SITE NAME) y una DISQUS_URL. Este último será tu shortname. Finalmente obtendrás algo como esto: http://short_name.disqus.com/admin/settings AddThis: necesitas Profile ID, lo puedes crear desde settings: https://www.addthis.com/settings/publisher Google Analytics: necesitas de un \"identificador\", si no lo tienes, entra a Google Analytics y crea una nueva propiedad. Desde Admin/Property obtendrás un identificador de la forma: UA-XXXX-YYYY Ahora agrega las siguientes líneas en pelicanconf.py y publishconf.py DISQUS_SITENAME = \"tu_short_name\" GOOGLE_ANALYTICS = \"UA-XXXXXX-1\" ADDTHIS_PROFILE = 'ra-XXXXXXXXXXXXXXXX' Más información en: Howto Setup Comments with Disqus in Pelican Configurando dominio propio Crea un archivo CNAME y dentro escribe tu dominio, por ejemplo: tudominio.com Guarda el archivo CNAME en la carpeta output Entra al panel de control de tu proveedor de dominio y crea un registro CNAME que apunte a tu_usuario.github.io o un registro A añadiendo los siguientes IP 192.30.252.153 y 192.30.252.154 . En mi caso Strato solo me déjo agregar un IP e igual funciona. Más info: Ayuda de Github para crear un registro CNAME Ayuda de Github para crear un registro A Escribiendo artículos en reStructuredText(rST) y Markdown(md) Creamos un archivo con la extensión .rst o .md y lo guardamos en la carpeta content. Ejemplo en reStructuredTex Mi primer post ############## : date : 2015 - 03 - 01 15 : 43 : tags : test , prueba : category : python : slug : mi - primer - post : author : TuNombre : summary : Versi ó n corta para el í ndice y feeds Ejemplo en Markdown Title : My super title Date : 2010 - 12 - 03 10 : 20 Tags : thats , awesome Category : yeah Slug : my - super - post Author : Alexis Metaireau Summary : Short version for index and feeds This is the content of my super blog post . Automatizar creación de archivos Para poder crear más rápido los posts podemos hacer uso de un script: Para rST: make_entry.py , de Nafiul Islam Descárgalo aquí . Para md: make_entrymd.py , modifiqué el archivo para que funcione con md. Descárgalo aquí Para ejecutarlo nos ubicamos en el directorio principal: $ python make_entrymd.py \"Nueva Entrada\" El resultado será: File created -> content/2015_02_31_nueva-entrada.md Se creará un archivo similar al siguiente: Title : Nueva Entrada Date : 2015 - 15 - 03 12 : 20 Tags : Category : Slug : nueva - entrada Author : Summary : status : draft El status draft te permite crear artículos en estado borrador. Muy útil si aún no deseas publicar o quieres que otra persona ĺo revise. Pelican no mostrará tu artículo hasta que borres la línea status: draft . Hasta entonces lo guardará en la carpeta drafts . Posts con la forma: /año/mes/dia/nombre-de-post.html Agregamos al archivo pelicanconf.py lo siguiente: # Formating URLs ARTICLE_URL = '{date:%Y}/{date:%m}/{date: %d }/{slug}.html' ARTICLE_SAVE_AS = '{date:%Y}/{date:%m}/{date: %d }/{slug}.html' Generando nuestra web Ahora ya tienes todo para escribir tus artículos y generar tu web. ¡Adelante! Crea un post (si usas el script make_entry/md.py ) $ python make_entrymd.py \"Nombre de tu nuevo post\" Escribe un artículo Entra a la carpeta content , abre el archivo que acabas de crear y escribe un artículo. Yo estoy usando Haroopress un procesador para Markdown que te permite ver los cambios en tiempo real mientras escribes. También puedes usar Vim, Emacs o SublimeText. Genera tu web $ cd blog $ make devserver Puedes ver los cambios en tu blog entrando en: http://localhost:8000 Y para salir escribe: $ make stopserver Empuja los cambios a tu repositorio Recuerda hacerlo desde la carpeta output $ cd output $ git add --all $ git commit -m \"commit message\" $ git push origin master Visita tu web. FIN Comandos extras en caso de accidentes Inicializar repositorio $ cd output $ git init $ git remote add origin https://github.com/username/username.github.io.git Restaurar repositorio $ cd blog $ git clone https://github.com/username/username.github.io.git output $ pelican content $ cd output $ git add --all $ git commit -m \"commit message\" $ git push origin master Referencias Observa el archivo pelicancof.py y publishconf.py de DandyDev creador de plantilla Booostrap3 Cheat Sheet para Markdown Amy Hanlon, Migrating to Github Pages using Pelican . Pelican Boostrap3 Theme","tags":"tutoriales","loc":"http://italofarfan.com/posts/2015/03/01/mi-blog-con-pelican-y-github.html","title":"Mi blog con Pelican y Github"}]}